(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
pbinom(q = 4, size = 30, prob = 0.2) # P(X <= 4) = 0.2552 < 0.35
pbinom(q = 5, size = 30, prob = 0.2) # P(X <= 5) = 0.4275 >= 0.35
pbinom(q = 6, size = 30, prob = 0.2) # P(X <= 6) = 0.6070 >= 0.35
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a números
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # función del paquete reshape2
ggplot(df2, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge") # Funciones del paquete ggplot2
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60) Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60), Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60)
Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
R cor(Altura, Peso)
relts<-cor(Altura, Peso)
print(relts)
production<- read.table('https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-05/Ejemplo-01/production.txt', header = TRUE)
ej1<-attach(production)
print(ej1)
ej1<-attach(production$RunTime, production$RunSize)
ej1<-attach(production$RunTime)
prod<- as.data.frame(production)
ej1<-attach(prod$RunTime)
ej1<-attach('prod$RunTime')
ej1<-attach(prod,RunTime)
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
pbinom(q = 4, size = 30, prob = 0.2) # P(X <= 4) = 0.2552 < 0.35
pbinom(q = 5, size = 30, prob = 0.2) # P(X <= 5) = 0.4275 >= 0.35
pbinom(q = 6, size = 30, prob = 0.2) # P(X <= 6) = 0.6070 >= 0.35
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
x <- seq(-4, 4, 0.01)*6 + 175 # Algunos posibles valores que puede tomar la v.a. X (mínimo: mu-4sigma, máximo: mu+4sigma)
y <- dnorm(x, mean = 175, sd = 6) # Valores correspondientes de la función de densidad de probabilidad
plot(x, y, type = "l", xlab = "", ylab = "")
pnorm(q = 180, mean = 175, sd = 6)
par(mfrow = c(2, 2))
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
mean <- 175; sd <- 6
x <- seq(mean-4*sd, mean+4*sd, 0.01)
y <- dnorm(x, mean, sd)
plot(x, y, type = "l", xlab="valores", ylab = "", xaxt = "n", yaxt = "n")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("Regla Empírica con ", mu == 175, " y ", sigma == 6)))
abline(v=mean, lty = 2, lwd = 2)
for(k in c(-3, -2, -1, 1, 2, 3)) abline(v = mean+k*sd, lty = 2, col = abs(k))
ps <- c(mean - 3*sd, mean - 2*sd, mean - sd, mean, mean + sd, mean + 2*sd, mean + 3*sd)
axis(side = 1, at = ps)
x0 <- NULL
for(i in 1:length(ps)-1) x0 <- c(x0, (ps[i]+ps[i+1])/2)
y0 <- dnorm(x0, mean, sd)*1/3
text(x = x0, y = y0, labels = c("2.35%", "13.5%", "34%", "34%", "13.5%", "2.35%"))
x1 <- (x[1]+ps[1])/2; y1 <- dnorm(mean, mean, sd)*1/2
xf <- (x[length(x)]+ps[length(ps)])/2; yf <- dnorm(mean, mean, sd)*1/2
text(x = c(x1, xf), y = c(y1, yf), labels = c("0.15%", "0.15%"))
segments(x0 = x1, y0 = 0, x1 = x1, y1 = y1,               # Draw one line as in Example 1
col = "cornflowerblue",                               # Color of line
lwd = 5,                                              # Thickness of line
lty = "dotted")
segments(x0 = xf, y0 = 0, x1 = xf, y1 = yf,
col = "cornflowerblue",
lwd = 5,
lty = "dotted")
library(ggplot2)
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 2), type = "l", lwd = 2, ylab = "")
title(main = "Función de Densidad Exponencial", ylab = "f(x)",
sub = expression("Parámetro " ~ lambda == 2))
text(x = 3, y = 1.5, labels = expression(f(x)==2*exp(-2*x) ~ " para x "  >= 0))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/2), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/2), col = 4)
set.seed(10) # Para reproducir posteriormente la muestra
(m1.4 <- rexp(n = 4, rate = 2))
mean(m1.4)
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 2), type = "l", lwd = 2, ylab = "")
title(main = "Función de Densidad Exponencial", ylab = "f(x)",
sub = expression("Parámetro " ~ lambda == 2))
text(x = 3, y = 1.5, labels = expression(f(x)==2*exp(-2*x) ~ " para x "  >= 0))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/2), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/2), col = 4)
set.seed(10) # Para reproducir posteriormente la muestra
(m1.4 <- rexp(n = 4, rate = 2))
mean(m1.4)
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60)
Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
R.cor(Altura, Peso)
cor(Altura, Peso)
production<- read.table('https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-05/Ejemplo-01/production.txt', header = TRUE)
prod<- as.data.frame(production)
ej1<-attach(prod$oRunTime)
print(ej1)
View(production)
View(production)
attach(prod$oRunTime)
plot(RunSize, RunTime, xlab="Run Size", ylab = "Run Time")
attach(prod$oRunTime, name=RunTime)
attach(prod$RunTime, name=RunTime)
prod<- as.data.frame(production)
attach(prod$RunTime, name=RunTime)
attach(prod$RunTime)
attach(prod)
plot(RunSize, RunTime, xlab="Run Size", ylab = "Run Time")
m1 <- lm(RunTime~RunSize)
summary(m1)
abline(lsfit(RunSize,RunTime))
m1$residuals
mean(m1$residuals)
sum(m1$residuals^2)/18
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
install.packages(c("boot", "class", "cli", "cluster", "colorspace", "dplyr", "ellipsis", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rlang", "spatial", "survival", "tibble", "tidyselect", "vctrs", "withr"))
source('~/postwork.r')
View(x)
typeof(new19)
typeof(prueba)
View(x)
dfht<- as.data.frame(table(prueba$FTHG))
dfht2<- prop.table(table(prueba$FTHG, exclude=c(3:6)))#con esta tabla me sale otro número
View(dfht)
dfht2<- prop.table(table(new20$FTHG))#con esta tabla me sale otro número
View(dfht2)
dfht<- as.data.frame(table(prueba$FTHG))
dfht2<- prop.table(table(prueba$FTHG, exclude=c(3:6)))#con esta tabla me sale otro número
dfht2<- prop.table(table(prueba$FTHG))#con esta tabla me sale otro número
#AwayTeam
dfat<- as.data.frame(table(prueba$FTAG))
dfat2<- prop.table(table(prueba$FTAG, exclude=c(3:6)))#con esta tabla me sale otro número
dfat2<- prop.table(table(prueba$FTAG))#con esta tabla me sale otro número
View(dfat2)
#Combinated
dcom<- prop.table(table(prueba$FTHG, prueba$FTAG, exclude=c(3:6)))
View(dcom)
library(ggplot2)
url1<- "https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Data/boxp.csv"
download.file(url = url1, destfile = "boxp.csv", mode ="wb")
data<- read.csv("boxp.csv")
head(data)
names(data)
hist(data$Mediciones, breaks=(seq(0,300,20)),
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
head(data)
View(dfht)
plot(x = dfht$Freq, main = "Gráfica de Goles",
xlab = "Goles", ylab = "Cantidad",
col = c("royalblue", "seagreen", "purple", "grey"))
barplot(dfht)
barplot(dfht$Freq)
barplot(dfht$Freq,dfht$Var1)
barplot(dfht$Freq,dfht$Var1, margin = 1)
barplot(dfht$Freq, margin = 1)
barplot(dfht$Freq
barplot(dfht$Freq)
barplot(dfht$Freq)
plot(x = dfht$Freq, main = "Gráfica de Goles",
xlab = "Goles", ylab = "Cantidad",
col = c("royalblue", "seagreen", "purple", "grey"))
#Sesion1Clase3
names(mtcars)
ggplot(mtcars, aes(x=cyl, y=hp, colour=mpg))+#ggplot
geom_point()+
theme_grey()+ #tema
facet_wrap("cyl")+ #lo divide por el número de cilindros
xlab('Núm Acilindros')+ #nombre en los ejes
ylab('Caballos de Fuerza')
ggplot(dfht, aes(x=Freq, y=Var)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ggplot(dfht, aes(x=Freq, y=Goles)) +
geom_point(col="tomato2", size=3) +   # Draw points
geom_segment(aes(x=make,
xend=make,
y=min(mileage),
yend=max(mileage)),
linetype="dashed",
size=0.1) +   # Draw dashed lines
labs(title="Dot Plot",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
coord_flip()
hist(dfht$Freq, breaks=(seq(0,300,20)),
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
hist(dfht$Freq,
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
hist(dfht$Var1,
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
hist(dfht$Var1,
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
hist(dfht$Var1,
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
hist(dfht$Freq,
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
barplot(dfht$Freq)
barplot(dfat2$Freq)
barplot(dfat2$Freq)
barplot(dfht$Freq)
barplot(dfat2$Freq)
barplot(dfat$Freq)
golesvector<- c(0:6)
barplot(dfht$Freq, names.arg = golesvector)
barplot(dfht$Freq, names.arg = golesvector, xlab = "Frecuencia de goles")
barplot(dfht$Freq, names.arg = golesvector, xlab = "Frecuencia de goles", ylab = Cantidad de Goles)
barplot(dfht$Freq, names.arg = golesvector, xlab = "Frecuencia de goles", ylab = 'Cantidad de Goles')
barplot(dfat$Freq)
library(dplyr)
url1<- "https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Data/boxp.csv"
download.file(url = url1, destfile = "boxp.csv", mode ="wb")
data<- read.csv("boxp.csv")
head(data)
names(data)
hist(data$Mediciones, breaks=(seq(0,300,20)),
main="Histograma de Mediciones",
xlab="Mediciones",
ylab="Frecuencia")
plot(x = dfht$Freq, main = "Gráfica de Goles",
xlab = "Goles", ylab = "Cantidad",
col = c("royalblue", "seagreen", "purple", "grey"))
data<- dfht
hist(data$Freq, breaks=(seq(0,500,20)),
main="Histograma de Goles",
xlab="Goles",
ylab="Frecuencia")
hist(data$Freq, breaks=(seq(0,400,20)),
main="Histograma de Goles",
xlab="Goles",
ylab="Frecuencia")
data<- dfat
hist(data$Freq, breaks=(seq(0,400,20)),
main="Histograma de Goles",
xlab="Goles",
ylab="Frecuencia")
data<- dfht
hist(data$Freq, breaks=(seq(0,400,20)),
main="Histograma de Goles",
xlab="Goles",
ylab="Frecuencia")
data2<- dfat
hist(data2$Freq, breaks=(seq(0,400,20)),
main="Histograma de Goles",
xlab="Goles",
ylab="Frecuencia")
hist(data2$Freq, breaks=(seq(0,500,20)),
main="Histograma de Goles",
xlab="Goles",
ylab="Frecuencia")
hist(data$Freq, breaks=(seq(0,400,20)),
main="Histograma de Goles de Casa",
xlab="Goles",
ylab="Frecuencia")
hist(data2$Freq, breaks=(seq(0,500,20)),
main="Histograma de Goles de Visitante",
xlab="Goles",
ylab="Frecuencia")
#HeatMap
attach(dcom)
typeof(dcom)
View(dcom)
dfdcom<- as.data.frame(dcom)
attach(dcom)
attach(dfdcom)
View(dfdcom)
ggplot(data, aes(dfdcom$Var1, dfdcom$Var2, fill= dfdcom$Freq)) +
geom_tile()
x <- dfdcom$Var1
y <- dfdcom$Var1
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
# Heatmap
ggplot(data, aes(X,Y,fill= dfdcom$Freq)) +
geom_tile()
# Heatmap
ggplot(dfdcom, aes(X,Y,fill= dfdcom$Freq)) +
geom_tile()
x <- dfdcom$Var1
y <- dfdcom$Var1
data <- dfdcom$Freq
# Heatmap
ggplot(dfdcom, aes(X,Y,fill= dfdcom$Freq)) +
geom_tile()
#versión 2.a ///////Estable
#HomeTeam
data<- dfht
hist(data$Freq, breaks=(seq(0,400,20)),
main="Histograma de Goles de Casa",
xlab="Goles",
ylab="Frecuencia")
hist(data2$Freq, breaks=(seq(0,500,20)),
main="Histograma de Goles de Visitante",
xlab="Goles",
ylab="Frecuencia")
setwd("~/Desktop/rstudio/postwork")
