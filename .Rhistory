#Probabilidad marginal de FTAG con 1 Gol
h <- filter(new19, FTAG == length(goles))
rlang::last_error()
goles<- c(1:3)
#Probabilidad marginal de FTAG con 1 Gol
h <- filter(new19, FTAG == length(goles))
i <- (length(h$FTHG)/length(new19$FTHG))*100
print(i)
vector1<- c(1:10)
vector2<- c(11:20)
table(vector1, vector2)
vector1<- c(1,2)
vector2<- c(3,4)
table(vector1, vector2)
vecto3<- as.data.frame()
vector3<- as.data.frame(table(vector1, vector2))
view vector3
View(vector3)
vector3<- as.data.frame(table(vecto1/vector2, 2))
vector3<- as.data.frame(table(vector1/vector2, 2))
vector3<- as.data.frame(table(vector1/vector2, vector2, 2))
new19<- select(liga19,FTHG,FTAG)
View(new19)
#Probabilidad marginal de FTHG con 1 Gol
b <- filter(new19, FTHG == 1)
c <- (length(b$FTHG)/length(new19$FTHG))*100
DFtr<-as.data.frame(table(length((b$FTHG), length(new19$FTHG))))
#Probabilidad marginal de FTHG con 1 Gol
b <- lenght(filter(new19, FTHG == 1))
DFtr<-as.data.frame(table((length(b$FTHG)/b$FTHG), length(new19$FTHG))))
vector1<- c(1,2)
DFtr<-as.data.frame(table(vector1, 2))
DFtr<-as.data.frame(table(vector1, 2,3))
DFtr<-as.data.frame(table(vector1))
View(DFtr)
liga19<- read.csv("SP119.CSV")
View(new19)
new19<- select(liga19,FTGH:FTAG)
new19<- select(liga19, FTHG, FTAG)
View(new19)
DFtr<- table(new19$FTHG)
View(DFtr)
DFtr<- prop.table(new19$FTHG)
View(DFtr)
DFtr<- as.data.frame(prop.table(new19$FTHG))
View(DFtr)
#resolución con tabla de frecuncias
DFHT<- mutate(as.data.frame(prop.table(new19$FTHG)))#es el equipo de casa
View (DFHT)
new20<- new19
#resolución con tabla de frecuncias
DFHT<- mutate(new20, as.data.frame(prop.table(new19$FTHG)))#es el equipo de casa
View(new20)
#resolución con tabla de frecuncias
new20<- mutate(new20, as.data.frame(prop.table(new19$FTHG)))#es el equipo de casa
View(new20)
#resolución con tabla de frecuncias
new20<- mutate(new20, as.data.frame(prop.table(new19$FTHG, margin=2)))#es el equipo de casa
#resolución con tabla de frecuncias
new20<- mutate(new20, as.data.frame(prop.table(new19$FTHG, margin=1)))#es el equipo de casa
#resolución con tabla de frecuncias
new20<- mutate(new20, as.data.frame(prop.table(new19$FTHG)))#es el equipo de casa
new20<- mutate(new20, as.data.frame(prop.table(new19$FTAG))#es el equipo de visita
new20<- mutate(new20, as.data.frame(prop.table(new19$FTAG)))#es el equipo de visita
new20<- mutate(new20, as.data.frame(prop.table(new19$FTAG)))#es el equipo de visita
View(new20)
View(DFtr)
#resolución con tabla de frecuncias
dfht<- table(new20$FTHG)
View(dfht)
#resolución con tabla de frecuncias
dfht<- table(new20$FTHG, exclude=c(3:6))
#resolución con tabla de frecuncias
dfht<- as.data.frame(table(new20$FTHG, exclude=c(3:6)))
dfat<- as.data.frame(table(new20$FTAG, exclude=c(3:6)))
dfc<- merge.data.frame(dfht, dfat)
View(dfc)
View(dfat)
dfht<- mutate(dfht, prop.table(dfht))
conjunto<- table(new20$FTHG, new20$FTAG, exlude=c(3:6))
conjunto<- table(new20$FTHG, new20$FTAG)
View(conjunto)
#resolución con tabla de frecuncias
dfht<- as.data.frame(table(new20$FTHG, exclude=c(3:6)))
View(dfht)
#Probabilidad marginal de FTHG con 1 Gol
b <- filter(new19, FTHG == 1)
c <- (length(b$FTHG)/length(new19$FTHG))*100
print(c)
dfht2<- as.data.frame(prop.table(new20$FTHG,margin = 1)))
dfht2<- as.data.frame(prop.table(new20$FTHG,margin = 1))
dfht2<- as.data.frame(prop.table(new20$FTHG,margin = c(1,2)))
dfht2<- as.data.frame(prop.table(new20$FTHG))
View(dfht2)
dfht2<- prop.table(table(new20$FTHG))
View(dfht2)
dfht2<- prop.table(table(new20$FTHG, exclude=c(3:6)))
View(dfht2)
dfht2<- prop.table(table(new20$FTHG))
View(dfht2)
dfht2<- prop.table(table(new20$FTHG , exclude=c(3:6, NA)))
View(dfht2)
dfht<- as.data.frame(table(new20$FTAG, ))
dfht<- as.data.frame(table(new20$FTAG))
dfat<- as.data.frame(table(new20$FTAG))
dfat2<- prop.table(table(new20$FTAG, exclude=c(3:6)))#con esta tabla me sale otro número
dfat2<- prop.table(table(new20$FTAG))#con esta tabla me sale otro número
View(dfht2)
View(dfat2)
dcom<- prop.table(table, new20$FTHG, new20$FTAG)
conjunto<- table(new20$FTHG, new20$FTAG)
View(conjunto)
dcom<- prop.table(table(new20$FTHG, new20$FTAG, exclude=c(3:6)))
View(dcom)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
length(muestra); muestra[1:3]
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a números
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # función del paquete reshape2
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
install.packages(reshape2)
install.packages(reshape)
install.packages(reshape2)
install.packages('reshape2')
(df2 <- melt(df2)) # función del paquete reshape2
(df2 <- melt(df2)) # función del paquete reshape2
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # función del paquete reshape2
clear
library(reshape2)
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
dbinom(x = 20, size = 30, prob = 0.2)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
pbinom(q = 4, size = 30, prob = 0.2) # P(X <= 4) = 0.2552 < 0.35
pbinom(q = 5, size = 30, prob = 0.2) # P(X <= 5) = 0.4275 >= 0.35
pbinom(q = 6, size = 30, prob = 0.2) # P(X <= 6) = 0.6070 >= 0.35
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a números
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # función del paquete reshape2
ggplot(df2, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge") # Funciones del paquete ggplot2
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
x <- seq(-4, 4, 0.01)*6 + 175 # Algunos posibles valores que puede tomar la v.a. X (mínimo: mu-4sigma, máximo: mu+4sigma)
y <- dnorm(x, mean = 175, sd = 6) # Valores correspondientes de la función de densidad de probabilidad
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
abline(v = 175, lwd = 2, lty = 2) # La media es 175
pnorm(q = 180, mean = 175, sd = 6)
par(mfrow = c(2, 2))
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
pnorm(q = 165, mean = 175, sd = 6)
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
pnorm(q = 180, mean = 175, sd = 6) - pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
pnorm(q = 182, mean = 175, sd = 6, lower.tail = FALSE)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
dev.off() # Para mostrar solo una gráfica
(b <- qnorm(p = 0.75, mean = 175, sd = 6))
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
dev.off() # Para mostrar solo una gráfica
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
pnorm(q = 180, mean = 175, sd = 6) - pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
pnorm(q = 182, mean = 175, sd = 6, lower.tail = FALSE)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
(b <- qnorm(p = 0.75, mean = 175, sd = 6))
pnorm(b, 175, 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
axis(side = 1, at = b, font = 2, padj = 1, lwd = 2)
set.seed(7563) # Para poder reproducir la muestra en el futuro
muestra <- rnorm(n = 1000, mean = 175, sd = 6)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_density(aes(y = 3*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean <- 175; sd <- 6
x <- seq(mean-4*sd, mean+4*sd, 0.01)
y <- dnorm(x, mean, sd)
plot(x, y, type = "l", xlab="valores", ylab = "", xaxt = "n", yaxt = "n")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("Regla Empírica con ", mu == 175, " y ", sigma == 6)))
abline(v=mean, lty = 2, lwd = 2)
for(k in c(-3, -2, -1, 1, 2, 3)) abline(v = mean+k*sd, lty = 2, col = abs(k))
ps <- c(mean - 3*sd, mean - 2*sd, mean - sd, mean, mean + sd, mean + 2*sd, mean + 3*sd)
axis(side = 1, at = ps)
x0 <- NULL
for(i in 1:length(ps)-1) x0 <- c(x0, (ps[i]+ps[i+1])/2)
y0 <- dnorm(x0, mean, sd)*1/3
text(x = x0, y = y0, labels = c("2.35%", "13.5%", "34%", "34%", "13.5%", "2.35%"))
x1 <- (x[1]+ps[1])/2; y1 <- dnorm(mean, mean, sd)*1/2
xf <- (x[length(x)]+ps[length(ps)])/2; yf <- dnorm(mean, mean, sd)*1/2
text(x = c(x1, xf), y = c(y1, yf), labels = c("0.15%", "0.15%"))
segments(x0 = x1, y0 = 0, x1 = x1, y1 = y1,               # Draw one line as in Example 1
col = "cornflowerblue",                               # Color of line
lwd = 5,                                              # Thickness of line
lty = "dotted")
segments(x0 = xf, y0 = 0, x1 = xf, y1 = yf,
col = "cornflowerblue",
lwd = 5,
lty = "dotted")
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
x <- seq(-4, 4, 0.01) # Algunos valores que puede tomar la v.a. T con 7 gl
y <- dt(x, df = 7) # Valores correspondientes de la densidad t de Student con 7 gl
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
abline(v = 0, lwd=2, lty=2)
pt(q = 1.5, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(min(x), x[x<=1.5], 1.5), c(0, y[x<=1.5], 0), col="purple")
pt(q = 2, df = 7, lower.tail = FALSE)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(2, x[x>=2], max(x)), c(0, y[x>=2], 0), col="orange")
(d <- qt(p = 0.025, df = 7))
pt(q = d, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
axis(side = 1, at = d, font = 2, padj = 1, lwd = 2)
set.seed(777) # Para poder reproducir la muestra en el futuro
muestra <- rt(n = 1000, df = 7)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7, # Intensidad del color fill
binwidth = 0.5) +
geom_density(aes(y = 0.5*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra t de Student') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
library(ggplot2)
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 2), type = "l", lwd = 2, ylab = "")
title(main = "Función de Densidad Exponencial", ylab = "f(x)",
sub = expression("Parámetro " ~ lambda == 2))
text(x = 3, y = 1.5, labels = expression(f(x)==2*exp(-2*x) ~ " para x "  >= 0))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/2), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/2), col = 4)
set.seed(10) # Para reproducir posteriormente la muestra
(m1.4 <- rexp(n = 4, rate = 2))
mean(m1.4)
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
library(ggplot2) # Utilizaremos estos paquetes para algunas gráficas
library(reshape2)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
pbinom(q = 4, size = 30, prob = 0.2) # P(X <= 4) = 0.2552 < 0.35
pbinom(q = 5, size = 30, prob = 0.2) # P(X <= 5) = 0.4275 >= 0.35
pbinom(q = 6, size = 30, prob = 0.2) # P(X <= 6) = 0.6070 >= 0.35
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a números
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # función del paquete reshape2
ggplot(df2, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge") # Funciones del paquete ggplot2
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60) Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60), Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
Altura <- c(1.94, 1.82, 1.75, 1.80, 1.62, 1.64, 1.68, 1.46, 1.50, 1.55, 1.72, 1.67, 1.57, 1.60)
Peso <- c(98, 80, 72, 83, 65, 70, 67, 47, 45, 50, 70, 61, 50, 52)
R cor(Altura, Peso)
relts<-cor(Altura, Peso)
print(relts)
production<- read.table('https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-05/Ejemplo-01/production.txt', header = TRUE)
ej1<-attach(production)
print(ej1)
ej1<-attach(production$RunTime, production$RunSize)
ej1<-attach(production$RunTime)
prod<- as.data.frame(production)
ej1<-attach(prod$RunTime)
ej1<-attach('prod$RunTime')
ej1<-attach(prod,RunTime)
library(ggplot2)
library(dplyr)
liga17<- read.csv("SP117.csv")
liga18<- read.csv("SP118.CSV")
liga19<- read.csv("SP119.CSV")
View(liga17)
new17<- select(liga17,Date:FTR)
new18<- select(liga18,Date:FTR)
new19<- select(liga19,Date, HomeTeam:FTR)
new17<- mutate(new17, Date = as.Date(Date, "%d/%m/%y"), FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
new18<- mutate(new18, Date = as.Date(Date, "%d/%m/%Y"), FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
new19<- mutate(new19, Date = as.Date(Date, "%d/%m/%Y"), FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
x<- rbind(new17,new18,new19)
prueba<-x
#Home Team
dfht<- as.data.frame(table(prueba$FTHG))
dfht2<-as.data.frame(prop.table(table(prueba$FTHG)))#con esta tabla me sale otro número
#AwayTeam
dfat<- as.data.frame(table(prueba$FTAG))
dfat2<-as.data.frame(prop.table(table(prueba$FTAG)))#con esta tabla me sale otro número
#Combinated
dcom<- as.data.frame(prop.table(table(prueba$FTHG, prueba$FTAG)))
#Versión 4 de gráficos de barra con GGplot
GolesHomeTeam<- ggplot(dfht2, aes(x=Var1, y=Freq))+
geom_col()+
xlab("Frecuencia") +
ylab("Goles") +
ggtitle("Gráfico de barras para el equipo de casa")
GolesAwayTeam<- ggplot(dfat2, aes(x=Var1, y=Freq))+
geom_col()+
xlab('Frecuencia')+
ylab('Goles')+
ggtitle('Gráfico de barras de equipo visitante')
GolesHomeTeam
GolesAwayTeam
#Heatmap
GolesConjunto<- ggplot(dcom, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile()
GolesConjunto
library(ggplot2)
library(dplyr)
liga17<- read.csv("SP117.csv")
liga18<- read.csv("SP118.CSV")
liga19<- read.csv("SP119.CSV")
View(liga17)
new17<- select(liga17,Date:FTR)
new18<- select(liga18,Date:FTR)
new19<- select(liga19,Date, HomeTeam:FTR)
new17<- mutate(new17, Date = as.Date(Date, "%d/%m/%y"), FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
new18<- mutate(new18, Date = as.Date(Date, "%d/%m/%Y"), FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
new19<- mutate(new19, Date = as.Date(Date, "%d/%m/%Y"), FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
x<- rbind(new17,new18,new19)
prueba<-x
#Home Team
dfht<- as.data.frame(table(prueba$FTHG))
dfht2<-as.data.frame(prop.table(table(prueba$FTHG)))#con esta tabla me sale otro número
#AwayTeam
dfat<- as.data.frame(table(prueba$FTAG))
dfat2<-as.data.frame(prop.table(table(prueba$FTAG)))#con esta tabla me sale otro número
#Combinated
dcom<- as.data.frame(prop.table(table(prueba$FTHG, prueba$FTAG)))
#Versión 4 de gráficos de barra con GGplot
GolesHomeTeam<- ggplot(dfht2, aes(x=Var1, y=Freq))+
geom_col()+
xlab("Frecuencia") +
ylab("Goles") +
ggtitle("Gráfico de barras para el equipo de casa")
GolesAwayTeam<- ggplot(dfat2, aes(x=Var1, y=Freq))+
geom_col()+
xlab('Frecuencia')+
ylab('Goles')+
ggtitle('Gráfico de barras de equipo visitante')
GolesHomeTeam
GolesAwayTeam
#Heatmap
GolesConjunto<- ggplot(dcom, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile()
GolesConjunto
x<- rbind(new17,new18,new19)
View(x)
setwd("~/Desktop/rstudio/postwork")
library(dplyr)
liga17<- read.csv("SP117.csv")
liga18<- read.csv("SP118.CSV")
liga19<- read.csv("SP119.CSV")
View(liga17)
View(liga18)
View(liga17)
View(liga18)
View(liga19)
new17<- select(liga17,Date,HomeTeam,HS,AwayTeam,AS)
new18<- select(liga18,Date,HomeTeam,HS,AwayTeam,AS)
new19<- select(liga19,Date,HomeTeam,HS,AwayTeam,AS)
x<- rbind(new17,new18,new19)
typeof(x)
x<- as.data.frame(rbind(new17,new18,new19))
typeof(x)
SmallData<- as.data.frame(rbind(new17,new18,new19))
typeof(SmallData)
SmallData<- as.data.frame(x)
typeof(SmallData)
View(SmallData)
SmallData<- as.data.frame(rbind(new17,new18,new19))
write.csv(SmallData, file='soccer.csv', row.names = FALSE)
